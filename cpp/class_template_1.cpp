// template specialization#include <TestBase.h>// class template:template <class T>class mycontainer {    T element;  public:    mycontainer (T arg) {element=arg;}    T increase () {return ++element;}};// class template specialization:template <>class mycontainer <char> {    char element;  public:    mycontainer (char arg) {element=arg;}    char uppercase ()    {      if ((element>='a')&&(element<='z'))      element+='A'-'a';      return element;    }};void testFunction (){	mycontainer<int> myint (7);	mycontainer<char> mychar ('j');	myint.increase();	mychar.uppercase();}int main () {	TestBase test (testFunction, "Class template with specialization");	test.Exec (10);	test.Exec (100);	test.Exec (1000);	test.Exec (10000);	test.Exec (100000);	test.Exec (1000000);	test.Exec (10000000);	return 0;}